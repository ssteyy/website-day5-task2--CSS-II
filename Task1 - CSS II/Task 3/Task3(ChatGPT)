### What is Sass?

Sass (Syntactically Awesome Style Sheets) is a CSS preprocessor that extends the capabilities of regular CSS by adding features such as variables, nesting, mixins, functions, and partials. These enhancements allow developers to write more maintainable and modular stylesheets. Sass files typically have a `.scss` or `.sass` file extension, with `.scss` being the more commonly used syntax due to its similarity to CSS.

### Differences Between Sass and Regular CSS

1. **Variables:** Sass allows you to define variables that can hold values such as colors, fonts, or any other CSS value, promoting reuse and easier maintenance.

2. **Nesting:** In Sass, you can nest selectors within one another, mimicking the HTML structure and improving readability.

3. **Partials and Imports:** Sass supports splitting styles into multiple files (partials) and importing them into a main stylesheet, enhancing organization.

4. **Mixins:** Sass allows the creation of reusable styles (mixins) that can include variables and parameters.

### Example: Sass File with Nesting, Partials, and Imports

**File Structure:**
```
styles/
├── _variables.scss  // Partial for variables
├── _mixins.scss     // Partial for mixins
├── main.scss        // Main Sass file
```

**1. Partial: `_variables.scss`**
```scss
// _variables.scss
$primary-color: #3498db;
$font-stack: Arial, sans-serif;
```

**2. Partial: `_mixins.scss`**
```scss
// _mixins.scss
@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}
```

**3. Main Sass File: `main.scss`**
```scss
// main.scss
@import 'variables';
@import 'mixins';

body {
  font-family: $font-stack;
  color: $primary-color;

  header {
    @include flex-center;
    height: 60px;
    background-color: darken($primary-color, 10%);
  }

  .content {
    padding: 20px;

    h1 {
      font-size: 2em;
      color: darken($primary-color, 20%);
    }

    p {
      margin: 10px 0;
    }
  }
}
```

### Compiled CSS Output

After compiling the above Sass code, the resulting CSS would look like this:

```css
/* main.css */
body {
  font-family: Arial, sans-serif;
  color: #3498db; /* Value of $primary-color */
}

header {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 60px;
  background-color: #2980b9; /* Darkened version of $primary-color */
}

.content {
  padding: 20px;
}

.content h1 {
  font-size: 2em;
  color: #2468a0; /* Darkened version of $primary-color */
}

.content p {
  margin: 10px 0;
}
```

### Notable Differences from Standard CSS

1. **Nesting:** The Sass code shows nested styles that reflect the HTML structure, making it easier to see the relationship between elements. In the compiled CSS, this nesting is flattened into a more traditional format.

2. **Variables:** The use of `$primary-color` and `$font-stack` makes it easy to change the theme of the site by updating a single variable.

3. **Mixins:** The `flex-center` mixin provides reusable flexbox styles without needing to repeat the code. This keeps the main stylesheet cleaner.

4. **Partials and Imports:** The `_variables.scss` and `_mixins.scss` files are modular and imported into the `main.scss`, which promotes better organization and maintainability of styles.

### Summary

Sass enhances the capabilities of standard CSS by allowing variables, nesting, and modular design through partials and imports. This results in more organized and maintainable code, making it easier for developers to manage complex stylesheets.