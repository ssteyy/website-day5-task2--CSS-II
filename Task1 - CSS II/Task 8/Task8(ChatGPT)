### What is Theming in CSS?

Theming in CSS refers to the process of creating a set of visual styles that define the look and feel of a web application. Themes can include colors, fonts, spacing, and other stylistic elements. Implementing theming allows users to customize their experience, often toggling between different styles like light and dark themes to enhance usability and reduce eye strain.

### Implementing Theming Using Sass

Sass (Syntactically Awesome Style Sheets) is a CSS preprocessor that provides features like variables, nesting, and mixins, making it easier to manage and implement theming in web applications. By utilizing Sass variables, you can easily switch between different themes by changing the variable values.

### Example: Simple Theme Switcher

Below is an example of how to implement a light and dark theme using Sass, along with a simple theme switcher using JavaScript.

**1. Setting Up the HTML Structure:**

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles.css">
    <title>Theme Switcher Example</title>
</head>
<body class="light-theme">
    <div class="container">
        <h1>Theme Switcher</h1>
        <p>This is a simple example of a theme switcher using Sass.</p>
        <button id="theme-toggle">Toggle Theme</button>
    </div>
    <script src="script.js"></script>
</body>
</html>
```

**2. Sass Code for Light and Dark Themes:**

**Sass (styles.scss):**
```scss
// _variables.scss
$light-background: #ffffff;
$light-text: #333333;
$dark-background: #333333;
$dark-text: #ffffff;

// _styles.scss
@import 'variables';

body {
    transition: background-color 0.3s, color 0.3s;
}

.light-theme {
    background-color: $light-background;
    color: $light-text;
}

.dark-theme {
    background-color: $dark-background;
    color: $dark-text;
}

.container {
    max-width: 600px;
    margin: 0 auto;
    padding: 20px;
    text-align: center;
}

button {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s, color 0.3s;

    &.light {
        background-color: $light-text;
        color: $light-background;
    }

    &.dark {
        background-color: $dark-background;
        color: $dark-text;
    }
}
```

### Compiled CSS Output

After compiling the above Sass code, the resulting CSS would look like this:

```css
body {
  transition: background-color 0.3s, color 0.3s;
}

.light-theme {
  background-color: #ffffff;
  color: #333333;
}

.dark-theme {
  background-color: #333333;
  color: #ffffff;
}

.container {
  max-width: 600px;
  margin: 0 auto;
  padding: 20px;
  text-align: center;
}

button {
  padding: 10px 20px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s, color 0.3s;
}

button.light {
  background-color: #333333;
  color: #ffffff;
}

button.dark {
  background-color: #333333;
  color: #ffffff;
}
```

### 3. JavaScript for Theme Switching

To toggle between themes, you can use the following JavaScript code:

**JavaScript (script.js):**
```javascript
const themeToggleButton = document.getElementById('theme-toggle');
const bodyElement = document.body;

themeToggleButton.addEventListener('click', () => {
    bodyElement.classList.toggle('dark-theme');
    bodyElement.classList.toggle('light-theme');

    if (bodyElement.classList.contains('dark-theme')) {
        themeToggleButton.textContent = 'Switch to Light Theme';
    } else {
        themeToggleButton.textContent = 'Switch to Dark Theme';
    }
});
```

### Explanation of the Code

1. **Sass Variables:**
   - The Sass file defines variables for colors in both light and dark themes. This makes it easy to manage and switch themes by changing the variable values.

2. **Theming Classes:**
   - Two classes, `.light-theme` and `.dark-theme`, are created to apply the respective styles to the `body` element.
   - The button styles are defined with modifiers to apply the appropriate background and text colors based on the active theme.

3. **JavaScript Functionality:**
   - The JavaScript code listens for clicks on the "Toggle Theme" button. When clicked, it toggles the classes on the `body` element to switch between light and dark themes.
   - The button text also updates based on the active theme, providing clear feedback to the user.

### Summary

Theming in CSS enhances user experience by allowing customization of styles, such as switching between light and dark modes. By using Sass, you can effectively manage theme styles with variables and modular code. This example illustrates how to create a simple theme switcher, demonstrating the benefits of using Sass for handling theming in web applications.